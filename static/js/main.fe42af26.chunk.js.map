{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","onSearch","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCESC,EAjBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,cACpD,6BACI,4BAAKL,GACL,2BAAIC,MCULK,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BACIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CAAMV,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,MAAOC,GAAIK,EAAOG,GAAGR,GAAIS,IAAKD,SCShFE,EAfG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEjB,OACI,6BACI,2BACIV,UAAU,mCACVW,KAAK,OACLC,YAAY,cACZC,SAAUH,MCDXI,EAPA,SAACC,GACZ,OAAQ,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACxEJ,EAAMK,WCuDAC,G,wDAjDX,aAAe,IAAD,8BACV,gBASJC,eAAiB,SAACC,GAGd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAV1C,EAAKC,MAAQ,CACTxB,OAAQ,GACRqB,YAAa,IALP,E,gEAoBb,IAAD,OACII,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACpB,OAAO6B,S,+BAE9B,MAE2BC,KAAKN,MAA7BxB,EAFH,EAEGA,OAAQqB,EAFX,EAEWA,YAEVU,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMxC,KAAKyC,oBAAoBC,SAASd,EAAYa,wBAI/D,OAAQlC,EAAOoC,OACX,6BACI,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWU,SAAUwB,KAAKZ,kBAE9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAQ+B,MAPF,8C,GApCdM,IAAMC,YCDxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fe42af26.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n//functional component as only JSX is returned\r\nconst Card = ({ name, email, id }) => {\r\n\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"RoboImage\"></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>{\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card name={robots[i].name} email={robots[i].email} id={robots[i].id} key={i} />\r\n                    //always use key while in loop. this is used to add or remove in vitual dom\r\n                );\r\n            }\r\n            )\r\n        }\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearch }) => {\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='text'\r\n                placeholder='Search here'\r\n                onChange={onSearch}\r\n\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\r\n        {props.children}\r\n    </div>);\r\n}\r\n//ideally styles should be in seperate file\r\n//props.children-retuns objects enrapped within this\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n//class component since inaddition to return we need to use renturn constructor etc..\r\nclass App extends React.Component {\r\n\r\n    constructor() {//called only once\r\n        super();\r\n        //intialize the state of the app.This is the first step to be done   \r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n    // this is the parent function that is passed to the child components\r\n    // following format shoudl be used to describe function, else correct event cannot be processed\r\n    onSearchChange = (event) => {\r\n        //we will update state with result from the child componet\r\n\r\n        this.setState({ searchField: event.target.value });\r\n        //use {} to execute variables\r\n        // this.setState to be used for setting a state variable\r\n\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}));\r\n    }\r\n    render() {//called everytime there is a change\r\n\r\n        const { robots, searchField } = this.state;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n\r\n        })\r\n        //if (0)=>false and if(1)=>true\r\n        return !robots.length ? <h1>Loading...</h1> : (//while array is fetched from webservice\r\n            <div>\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robo Friends</h1>\r\n                    <SearchBox onSearch={this.onSearchChange} />\r\n                </div>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n// const robots = [\r\n//     {\r\n//         id: '1',\r\n//         name: 'jerin',\r\n//         email: \"jerinemail.gmail.com\"\r\n//     },\r\n//     {\r\n//         id: '2',\r\n//         name: 'chinnu',\r\n//         email: \"chinnuemail.gmail.com\"\r\n\r\n//     },\r\n//     {\r\n//         id: '3',\r\n//         name: 'EJ',\r\n//         email: \"EJemail.gmail.com\"\r\n\r\n//     }\r\n// ];\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}